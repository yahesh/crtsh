#!/usr/bin/env php
<?php

  # crtsh 0.2a0
  #
  # Copyright (c) 2021-2023, Yahe
  # All rights reserved.
  #
  #
  # description:
  # ============
  #
  # This script extracts all domain names for given domains from
  # the certificate transparency logs. It uses the JSON export of
  # crt.sh to read the log info and the extracts the contained
  # domain values.
  #
  #
  # usage:
  # ======
  #
  # ./crtsh [--exclude-expired] <domain>*
  #
  #
  # parameters:
  # ===========
  #
  # --exclude-expired     do not display domains that come from
  #                       expired certificates

  define("EXCLUDE_EXPIRED", "--exclude-expired");
  define("URL",             "https://crt.sh/?output=json&Identity=");
  define("URL_EXPIRED",     "&exclude=expired");

  define("COMMON_NAME", "common_name");
  define("NAME_VALUE",  "name_value");

  define("TIMEOUT", 30*60);

  # calls $command, prints $stdin to its standard input and reads
  # $stdout and $stderr from its standard output and its error output
  function execute_with_stdio($command, $stdin, &$stdout, &$stderr) {
    $result = false;

    # specify the used descriptors
    $descriptors = [0 => ["pipe", "r"],  # STDIN
                    1 => ["pipe", "w"],  # STDOUT
                    2 => ["pipe", "w"]]; # STDERR

    # open the process handle
    $handle = proc_open($command, $descriptors, $pipes);
    if (false !== $handle) {
      # write stdin content and close the pipe
      if (null !== $stdin) {
        # prevent stdio from blocking
        #stream_set_blocking($pipes[0], false);

        # write stdin in 1kb chunks to prevent blocking
        $counter = 0;
        while ($counter < strlen($stdin)) {
          $write_size = strlen($stdin)-$counter;
          if ($write_size > STREAM_BUFFER) {
            $write_size = STREAM_BUFFER;
          }

          $bytes_written = fwrite($pipes[0], substr($stdin, $counter, $write_size));
          fflush($pipes[0]);

          $counter += $bytes_written;
        }
      }
      fclose($pipes[0]);

      # read stdout content and close the pipe
      $stdout = stream_get_contents($pipes[1]);
      fclose($pipes[1]);

      # read stderr content and close the pipe
      $stderr = stream_get_contents($pipes[2]);
      fclose($pipes[2]);

      # close the process and get the return value
      $result = proc_close($handle);
    }

    return $result;
  }

  function main($argv) {
    $result = 1;

    $domains        = [];
    $excludeExpired = false;

    for ($index = 1; $index < count($argv); $index++) {
      $argv[$index] = strtolower(trim($argv[$index]));

      # get rid of empty strings
      if (0 < strlen($argv[$index])) {
        # might be a parameter
        if (0 === count($domains)) {
          # check if a parameter is set
          if (0 === strcasecmp($argv[$index], EXCLUDE_EXPIRED)) {
            $excludeExpired = true;
          } else {
            $domains[] = $argv[$index];
          }
        } else {
          # after the first domain there may only be domains
          $domains[] = $argv[$index];
        }
      }
    }

    # we do not proceed if there was no domain
    if (0 < count($domains)) {
      # set default return code if nothing fails
      $result = 0;

      $names = [];

      foreach ($domains as $domain) {
        # build the URL
        $url = URL.urlencode($domain);
        if ($excludeExpired) {
          $url .= URL_EXPIRED;
        }

        # read the URL
        $ret = execute_with_stdio("curl -fs ".escapeshellarg($url), null, $json, $stderr);
        if (0 === $ret) {
          # decode json
          $json = @json_decode($json, true, 512, JSON_OBJECT_AS_ARRAY);
          if (is_array($json)) {
            foreach ($json as $element) {
              if (array_key_exists(COMMON_NAME, $element)) {
                $item = strtolower(trim($element[COMMON_NAME]));

                # get rid of empty strings
                if (0 < strlen($item)) {
                  if (!array_key_exists($item, $names)) {
                    $names[$item] = $item;
                  }
                }
              } else {
                # array has wrong format
                $result = 4;
              }

              if (array_key_exists(NAME_VALUE, $element)) {
                # get single entries
                $temp = explode("\n", $element[NAME_VALUE]);
                if (is_array($temp)) {
                  foreach ($temp as $item) {
                    $item = strtolower(trim($item));

                    # get rid of empty strings
                    if (0 < strlen($item)) {
                      if (!array_key_exists($item, $names)) {
                        $names[$item] = $item;
                      }
                    }
                  }
                }
              } else {
                # array has wrong format
                $result = 4;
              }
            }
          } else {
            #decoding json failed
            $result = 3;
          }
        } else {
          # reading a URL failed
          $result = 2;
        }
      }

      if (0 < count($names)) {
        sort($names);

        foreach ($names as $name) {
          print($name."\n");
        }
      }
    }

    return $result;
  }

  exit(main($argv));

